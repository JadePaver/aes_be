generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id           Int      @id @default(autoincrement())
  user_code    String?  @db.VarChar(55)
  role_id      Int?
  fName        String   @db.VarChar(55)
  lName        String   @db.VarChar(55)
  mName        String   @db.VarChar(55)
  ext_name     String?  @db.VarChar(55)
  birthDate    DateTime @db.Date
  sex_id       Int?
  contact      String   @db.VarChar(55)
  email        String   @db.VarChar(55)
  username     String   @unique @db.VarChar(55)
  password     String   @db.VarChar(255)
  isRemoved    Int      @default(0) @db.TinyInt
  isLocked     Int      @default(0) @db.TinyInt
  dateModified DateTime @default(now()) @db.DateTime(0)
  dateCreated  DateTime @default(now()) @db.DateTime(0)

  profile_image      profile_image?
  role               roles?               @relation(fields: [role_id], references: [id])
  sex                sex_tbl?             @relation(fields: [sex_id], references: [id])
  assigned_classroom assigned_classroom[]
  graduate_records   graduate_records?
  archive_codes      archive_codes[]      @relation("UserArchiveCodes")
  assigned_subject   assigned_subject[]
  module_isRead      module_isRead[]
}

model archive_codes {
  id      Int    @id @default(autoincrement())
  code    String @unique @db.VarChar(155)
  user_id Int?   @unique
  user    users? @relation(fields: [user_id], references: [id], onDelete: Cascade, name: "UserArchiveCodes")
}

model classrooms {
  id        Int    @id @default(autoincrement())
  code      String @unique @db.VarChar(155)
  name      String @db.VarChar(155)
  grade     Int
  year      Int
  isRemoved Int    @default(0) @db.TinyInt

  assignedClassroom assigned_classroom[]
  subjects          subjects[]

  @@unique([name, year, grade])
}

model assigned_classroom {
  user_id  Int  @unique
  class_id Int?

  user      users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  classroom classrooms? @relation(fields: [class_id], references: [id], onDelete: Cascade)
}

model modules {
  id            Int             @id @default(autoincrement())
  subject_id    Int
  name          String          @db.VarChar(155)
  description   String          @db.VarChar(255)
  is_removed    Int             @default(0) @db.TinyInt
  availableDate DateTime
  subject       subjects        @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  moduleFiles   module_files[]
  module_isRead module_isRead[]

  @@unique([name, subject_id])
}

model module_files {
  id        Int     @id @default(autoincrement())
  module_id Int
  file      String  @db.VarChar(255)
  label     String  @db.VarChar(255)
  module    modules @relation(fields: [module_id], references: [id], onDelete: Cascade)

  @@unique([file, label, module_id])
}

model module_isRead {
  module_id Int
  user_id   Int
  isRead    Int @default(0) @db.TinyInt

  module modules @relation(fields: [module_id], references: [id], onDelete: Cascade)
  user   users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([module_id, user_id])
}

model subjects {
  id          Int      @id @default(autoincrement())
  code        String   @db.VarChar(55)
  name        String   @db.VarChar(155)
  year        String   @db.VarChar(55)
  class_id    Int?
  is_removed  Int      @default(0) @db.TinyInt
  dateCreated DateTime @default(now()) @db.DateTime(0)

  classroom           classrooms?           @relation(fields: [class_id], references: [id], onDelete: SetNull)
  assigned_subject    assigned_subject[]
  modules             modules[]
  assigned_assessment assigned_assessment[]

  @@unique([name, year, class_id])
}

model assigned_subject {
  user_id     Int
  subject_id  Int
  dateCreated DateTime @default(now()) @db.DateTime(0)

  user    users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  subject subjects? @relation(fields: [subject_id], references: [id], onDelete: Cascade)

  // Composite unique constraint ensures no duplicates of the same user_id and subject_id combination
  @@unique([user_id, subject_id]) // This enforces the unique constraint on the combination of user_id and subject_id
}

model graduate_records {
  id              Int      @id @default(autoincrement())
  user_id         Int      @unique
  graduation_date DateTime
  date_added      DateTime @default(now())

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model roles {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(55)
  code  String  @db.VarChar(55)
  users users[]
}

model profile_image {
  id      Int    @id @default(autoincrement())
  user_id Int?   @unique
  users   users? @relation(fields: [user_id], references: [id])
  label   String @db.VarChar(255)
  file    String @db.VarChar(255)
}

model sex_tbl {
  id    Int     @id @default(autoincrement())
  label String  @db.VarChar(155)
  users users[]
}

model assigned_assessment {
  subject_id    Int
  assessment_id Int

  subject    subjects    @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  assessment assessments @relation(fields: [assessment_id], references: [id], onDelete: Cascade)

  @@unique([subject_id, assessment_id]) // Ensures no duplicate subject-assessment assignments
}

model assessments {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(155)
  description   String   @db.VarChar(255)
  duration      Int
  allowedLate   Boolean  @default(false)
  startDateTime DateTime
  endDateTime   DateTime
  dateCreated   DateTime @default(now())
  dateModified  DateTime

  questions          questions[]
  assignedAssessment assigned_assessment[]
}

model questions {
  id                 Int    @id @default(autoincrement())
  assessment_id      Int
  label              String @db.VarChar(255)
  points             Int
  type_id            Int
  upperCaseSensitive Int    @default(0) @db.TinyInt
  isRemoved          Int    @default(0) @db.TinyInt

  assessment assessments     @relation(fields: [assessment_id], references: [id], onDelete: Cascade)
  type       questions_types @relation(fields: [type_id], references: [id])
  choices    choices[]
  question_images question_images[]

}

model question_images {
  id    Int    @id @default(autoincrement())
  question_id Int
  label String @db.VarChar(255)
  file  String @db.VarChar(255)

  question questions @relation(fields: [question_id], references: [id], onDelete: Cascade)
}

model choices {
  id          Int    @id @default(autoincrement())
  question_id Int
  label       String @db.VarChar(255)
  isCorrect   Int    @default(0) @db.TinyInt

  question questions @relation(fields: [question_id], references: [id], onDelete: Cascade)
}

model questions_types {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  questions questions[]
}
