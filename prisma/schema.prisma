generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id           Int      @id @default(autoincrement())
  user_code    String?  @db.VarChar(55)
  role_id      Int?
  fName        String   @db.VarChar(55)
  lName        String   @db.VarChar(55)
  mName        String   @db.VarChar(55)
  ext_name     String?  @db.VarChar(55)
  birthDate    DateTime @db.Date
  sex_id       Int?
  contact      String   @db.VarChar(55)
  email        String   @db.VarChar(55)
  username     String   @unique @db.VarChar(55)
  password     String   @db.VarChar(255)
  isRemoved    Int      @default(0) @db.TinyInt
  isLocked     Int      @default(0) @db.TinyInt
  dateModified DateTime @default(now()) @db.DateTime(0)
  dateCreated  DateTime @default(now()) @db.DateTime(0)

  profile_image      profile_image?
  role               roles?               @relation(fields: [role_id], references: [id])
  sex                sex_tbl?             @relation(fields: [sex_id], references: [id])
  assigned_classroom assigned_classroom[]
  graduate_records   graduate_records?
  archive_codes      archive_codes[]      @relation("UserArchiveCodes")
  assigned_subject   assigned_subject?
}

model archive_codes {
  id      Int    @id @default(autoincrement())
  code    String @unique @db.VarChar(155)
  user_id Int?   @unique
  user    users? @relation(fields: [user_id], references: [id], onDelete: Cascade, name: "UserArchiveCodes")
}

model classrooms {
  id        Int    @id @default(autoincrement())
  code      String @unique @db.VarChar(155)
  name      String @db.VarChar(155)
  grade     Int
  year      Int
  isRemoved Int    @default(0) @db.TinyInt

  assignedClassroom assigned_classroom[]
  subjects subjects[]


  @@unique([name, year, grade])
}

model assigned_classroom {
  user_id  Int  @unique
  class_id Int?

  user      users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  classroom classrooms? @relation(fields: [class_id], references: [id], onDelete: Cascade)
}

model subjects {
  id               Int                @id @default(autoincrement())
  code             String             @db.VarChar(55)
  name             String             @db.VarChar(155)
  year             String             @db.VarChar(55)
  class_id         Int?   
  isRemoved Int    @default(0) @db.TinyInt
  dateCreated      DateTime           @default(now()) @db.DateTime(0)

  classroom        classrooms?        @relation(fields: [class_id], references: [id], onDelete: SetNull)
  assigned_subject assigned_subject[]

   @@unique([name, year, class_id])
}

model assigned_subject {
  user_id  Int  @unique
  class_id Int?

  user    users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  subject subjects? @relation(fields: [class_id], references: [id], onDelete: Cascade)
}


model graduate_records {
  id              Int      @id @default(autoincrement())
  user_id         Int      @unique
  graduation_date DateTime
  date_added      DateTime @default(now())

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model roles {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(55)
  code  String  @db.VarChar(55)
  users users[]
}

model profile_image {
  id      Int    @id @default(autoincrement())
  user_id Int?   @unique
  users   users? @relation(fields: [user_id], references: [id])
  label   String @db.VarChar(255)
  file    String @db.VarChar(255)
}

model sex_tbl {
  id    Int     @id @default(autoincrement())
  label String  @db.VarChar(155)
  users users[]
}

